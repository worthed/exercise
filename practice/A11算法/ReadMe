数组：
在内存中存储一系列元素，都是相连的，eg:把一个4元素数组存入内存中某位置，但空位只有3个，不够连续安放元素，
则需要计算机重新分配一款可容纳4个元素的内存位置
因此数组的缺点：
1、重新分配的位置可能空位太多，导致浪费内存
2、若此处空位有10个，当你的数组元素增加到10个以上时，又得换位置

链表：可以存放在内存的任何地方，把各元素在内存的地址一个一个链接起来

数组和链表的区别：
查找 数组O(1)，链表O(n)  散列表(平均情况)O(1) 最糟O(n)
插入 数组O(n)，链表O(1)  散列表(平均情况)O(1) 最糟O(n)
删除 数组O(n)，链表O(1)  散列表(平均情况)O(1) 最糟O(n)

散列表：
即python中的字段，散列表由键和值组成。
常用语大海捞针式的查找，例如用于访问网站，计算机会将网站转化为IP地址，就是键和值的映射，俗称将网址映射到IP地址，被称为DNS解析
也用于网站的缓存
总的来说：散列表适合用于模拟映射关系、防止重复、缓存/记住数据，以免服务器再通过处理来生成他们

散列表中，键值一一对应
如姓名，电话式：
wang:131
zhang:132
li：133
……
此时是散列表的平均情况O(1)，但当wang有多个电话，要存入wang键中，则会发生冲突，可以采用链表
wang:手机a131-手机b1311-手机c1312……
zhang:132
li：133
……
但如此，会降低散列表的速度。若要避开此冲突，一需要使用较低的填装因子，二使用良好的散列函数
填装因子：若上述姓名-电话数组，有10个空位，使用了3个，则填充因子为3/10。一般填装因子大于0.7，则需要调整散列表的长度了
散列函数：良好的散列函数会让数组均匀分布，减少冲突的可能，如SHA函数